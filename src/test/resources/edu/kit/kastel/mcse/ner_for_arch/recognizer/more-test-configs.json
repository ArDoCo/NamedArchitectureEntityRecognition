[
  {
    "modelProvider": "OPEN_AI",
    "model": "gpt-4o-mini",
    "modelTemperature": 0.0,
    "testProject": "all",
    "promptType": "TWO_PART_PROMPT",
    "prompt": {
      "first": "In the following text, identify all architecturally relevant components that are explicitly named.\n\nFor each such component:\n1. Provide:\n- The primary name (as it appears in the text)\n- All alternative names or abbreviations found in the text (case-insensitive match)\n\n2. For each appearance:\n- The line number (start counting from 1)\n- Whether the appearance is:\n    DIRECT = The name or any alternative name of the component appears literally in the text (case-insensitive)\n    or\n    INDIRECT = The component is referred to indirectly, e.g., by pronouns (\"it\", \"this component\", \"such module\")\n\nRules:\n- Only include actual architecturally relevant components (e.g., modules, services, subsystems, layers)\n- Do not include: interfaces, external libraries, frameworks, or technologies unless they are implemented in this architecture as components\nReturn your findings in a clear, unambiguous, structured text format so that a follow-up transformation into JSON is easy.\n",
      "second": "Given the last answer (see below), transform it into a valid JSON array.\nFor each component, output a JSON object containing:\n{\n  \"name\": \"<primary name>\",\n  \"type\": \"COMPONENT\",\n  \"alternativeNames\": [\"<alt1>\", \"<alt2>\", ...],\n  \"occurrences\": [\n    { \"line\": <line number>, \"referenceType\": \"<DIRECT|INDIRECT>\" },\n    ...\n  ]\n}\n\nMake sure:\n- The JSON array is syntactically correct.\n- All alternative names are inside an array (even if empty).\n- All occurrences are listed with correct line numbers and \"DIRECT\" or \"INDIRECT\" as \"referenceType\".\n- No extra text - output only the JSON array.\n\nExample for a single component:\n[\n  {\n    \"name\": \"Database\",\n    \"type\": \"COMPONENT\",\n    \"alternativeNames\": [\"UserDatabase\", \"DB\"],\n    \"occurrences\": [\n      { \"line\": 1, \"referenceType\": \"DIRECT\" },\n      { \"line\": 3, \"referenceType\": \"INDIRECT\" },\n      { \"line\": 8, \"referenceType\": \"DIRECT\" },\n      { \"line\": 11, \"referenceType\": \"INDIRECT\" }\n    ]\n  }\n]"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 0.0,
    "testProject": "ALL",
    "promptType": "STRUCTURED_TEXT_OUTPUT_PROMPT",
    "prompt": {
      "first": "Your task is to process the input text (in one sentence per line format), identify architecturally relevant software architecture components, and output structured data about their mentions.\n\nInstructions:\n1. Component identification:\nIdentify all architecturally relevant software architecture components that are explicitly named in the text (direct mentions).\nFor each, determine the most descriptive name.\n2. Line-by-line analysis:\nFor each line in the text (starting from 1):\nEvery time a previously identified component is mentioned, output: \"<componentName>, <lineNumber>, <referenceType>\"\ncomponentName: The most descriptive name of the component (consistent across all lines).\nlineNumber: Line number where the reference occurs.\nreferenceType: either \"DIRECT\" or \"INDIRECT\".\nDIRECT -> The name or any alternative name of the component appears in the text (case-insensitive).\nINDIRECT -> The component is referenced indirectly (e.g., via pronouns like \"it\", or via \"this module\").\n3. Alternative names:\nAfter analyzing all lines, list alternative or ambiguous names for each component in this format: \"<componentName>: <alternativeName1>, <alternativeName2>, ...\"\n(If there are no alternatives for a component, write \"None\".)\n4. Final consistency check:\nVerify that:\nAll line numbers are accurate.\nAll alternative names are correctly listed.\nDIRECT is used only when the component name or an alternative name appears in the line.\n\nFormatting:\nReturn results in structured plain text as follows:\n<componentName>, <lineNumber>, <referenceType>\n...\nAlternative names:\n<componentName>: <alternativeName1>, <alternativeName2>, ...\n...\n\nExample:\nText:\nThe AuthenticationService handles login requests.\nIt forwards valid credentials to the UserDatabase.\nThe service logs each attempt.\n\nOutput:\nAuthenticationService, 1, DIRECT\nAuthenticationService, 2, INDIRECT\nUserDatabase, 2, DIRECT\nAuthenticationService, 3, INDIRECT\n\nAlternative names:\nAuthenticationService: service\nUserDatabase: None\n\n\nUse this exact output format and do not add anything else!"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 0.5,
    "testProject": "ALL",
    "promptType": "STRUCTURED_TEXT_OUTPUT_PROMPT",
    "prompt": {
      "first": "Your task is to process the input text (in one sentence per line format), identify architecturally relevant software architecture components, and output structured data about their mentions.\n\nInstructions:\n1. Component identification:\nIdentify all architecturally relevant software architecture components that are explicitly named in the text (direct mentions).\nFor each, determine the most descriptive name.\n2. Line-by-line analysis:\nFor each line in the text (starting from 1):\nEvery time a previously identified component is mentioned, output: \"<componentName>, <lineNumber>, <referenceType>\"\ncomponentName: The most descriptive name of the component (consistent across all lines).\nlineNumber: Line number where the reference occurs.\nreferenceType: either \"DIRECT\" or \"INDIRECT\".\nDIRECT -> The name or any alternative name of the component appears in the text (case-insensitive).\nINDIRECT -> The component is referenced indirectly (e.g., via pronouns like \"it\", or via \"this module\").\n3. Alternative names:\nAfter analyzing all lines, list alternative or ambiguous names for each component in this format: \"<componentName>: <alternativeName1>, <alternativeName2>, ...\"\n(If there are no alternatives for a component, write \"None\".)\n4. Final consistency check:\nVerify that:\nAll line numbers are accurate.\nAll alternative names are correctly listed.\nDIRECT is used only when the component name or an alternative name appears in the line.\n\nFormatting:\nReturn results in structured plain text as follows:\n<componentName>, <lineNumber>, <referenceType>\n...\nAlternative names:\n<componentName>: <alternativeName1>, <alternativeName2>, ...\n...\n\nExample:\nText:\nThe AuthenticationService handles login requests.\nIt forwards valid credentials to the UserDatabase.\nThe service logs each attempt.\n\nOutput:\nAuthenticationService, 1, DIRECT\nAuthenticationService, 2, INDIRECT\nUserDatabase, 2, DIRECT\nAuthenticationService, 3, INDIRECT\n\nAlternative names:\nAuthenticationService: service\nUserDatabase: None\n\n\nUse this exact output format and do not add anything else!"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 1.0,
    "testProject": "ALL",
    "promptType": "STRUCTURED_TEXT_OUTPUT_PROMPT",
    "prompt": {
      "first": "Your task is to process the input text (in one sentence per line format), identify architecturally relevant software architecture components, and output structured data about their mentions.\n\nInstructions:\n1. Component identification:\nIdentify all architecturally relevant software architecture components that are explicitly named in the text (direct mentions).\nFor each, determine the most descriptive name.\n2. Line-by-line analysis:\nFor each line in the text (starting from 1):\nEvery time a previously identified component is mentioned, output: \"<componentName>, <lineNumber>, <referenceType>\"\ncomponentName: The most descriptive name of the component (consistent across all lines).\nlineNumber: Line number where the reference occurs.\nreferenceType: either \"DIRECT\" or \"INDIRECT\".\nDIRECT -> The name or any alternative name of the component appears in the text (case-insensitive).\nINDIRECT -> The component is referenced indirectly (e.g., via pronouns like \"it\", or via \"this module\").\n3. Alternative names:\nAfter analyzing all lines, list alternative or ambiguous names for each component in this format: \"<componentName>: <alternativeName1>, <alternativeName2>, ...\"\n(If there are no alternatives for a component, write \"None\".)\n4. Final consistency check:\nVerify that:\nAll line numbers are accurate.\nAll alternative names are correctly listed.\nDIRECT is used only when the component name or an alternative name appears in the line.\n\nFormatting:\nReturn results in structured plain text as follows:\n<componentName>, <lineNumber>, <referenceType>\n...\nAlternative names:\n<componentName>: <alternativeName1>, <alternativeName2>, ...\n...\n\nExample:\nText:\nThe AuthenticationService handles login requests.\nIt forwards valid credentials to the UserDatabase.\nThe service logs each attempt.\n\nOutput:\nAuthenticationService, 1, DIRECT\nAuthenticationService, 2, INDIRECT\nUserDatabase, 2, DIRECT\nAuthenticationService, 3, INDIRECT\n\nAlternative names:\nAuthenticationService: service\nUserDatabase: None\n\n\nUse this exact output format and do not add anything else!"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 0.0,
    "testProject": "ALL",
    "promptType": "JSON_OUTPUT_PROMPT",
    "prompt": {
      "first": "You are an experienced software engineer with expertise in software architecture analysis.\nGiven a text describing a software architecture (one sentence per line), identify all software architecture components mentioned in each sentence.\n\nFor each component, output a JSON object containing:\n- \"name\": the primary name of the component (use the most descriptive name).\n- \"type\": \"COMPONENT\"\n- \"alternativeNames\": a list of alternative or ambiguous names, if applicable.\n- \"occurrences\": a list of objects each with:\n    - \"line\": the line number of the occurrence (starting from 1),\n    - \"referenceType\": \"DIRECT\" or \"INDIRECT\".\n\nRules:\n- Use the exact casing of the component as it appears in the text.\n- Normalize similar component names if they clearly refer to the same concept (e.g., treat Database and User Database as the same component).\n- Only include components that are relevant architectural elements.\n- If a component appears in multiple lines, list all occurrences.\n- A reference where the name or one of the alternative names is in the sentence is called DIRECT. Otherwise it is called INDIRECT.\n- Only return a JSON array of component objects, nothing else.\n\nExample (for a single component):\n{\n    \"name\": \"Database\",\n    \"type\": \"COMPONENT\"\n    \"alternativeNames\": [\"UserDatabase\", \"DB\"],\n    \"occurrences\": [\n        {\"line\": 1, \"referenceType\": \"DIRECT\"},\n        {\"line\": 3, \"referenceType\": \"INDIRECT\"},\n        {\"line\": 8, \"referenceType\": \"DIRECT\"},\n        {\"line\": 11, \"referenceType\": \"INDIRECT\"}\n    ]\n}\n\nOutput should be a JSON array (and nothing else!), like:\n[\n    {\n        \"name\": \"...\",\n        \"type\": \"COMPONENT\",\n        \"alternativeNames\": [...],\n        \"occurrences\": [\n            {\"line\": ..., \"referenceType\": \"...\"},\n            ...\n        ]\n    },\n    ...\n]"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 0.5,
    "testProject": "ALL",
    "promptType": "JSON_OUTPUT_PROMPT",
    "prompt": {
      "first": "You are an experienced software engineer with expertise in software architecture analysis.\nGiven a text describing a software architecture (one sentence per line), identify all software architecture components mentioned in each sentence.\n\nFor each component, output a JSON object containing:\n- \"name\": the primary name of the component (use the most descriptive name).\n- \"type\": \"COMPONENT\"\n- \"alternativeNames\": a list of alternative or ambiguous names, if applicable.\n- \"occurrences\": a list of objects each with:\n    - \"line\": the line number of the occurrence (starting from 1),\n    - \"referenceType\": \"DIRECT\" or \"INDIRECT\".\n\nRules:\n- Use the exact casing of the component as it appears in the text.\n- Normalize similar component names if they clearly refer to the same concept (e.g., treat Database and User Database as the same component).\n- Only include components that are relevant architectural elements.\n- If a component appears in multiple lines, list all occurrences.\n- A reference where the name or one of the alternative names is in the sentence is called DIRECT. Otherwise it is called INDIRECT.\n- Only return a JSON array of component objects, nothing else.\n\nExample (for a single component):\n{\n    \"name\": \"Database\",\n    \"type\": \"COMPONENT\"\n    \"alternativeNames\": [\"UserDatabase\", \"DB\"],\n    \"occurrences\": [\n        {\"line\": 1, \"referenceType\": \"DIRECT\"},\n        {\"line\": 3, \"referenceType\": \"INDIRECT\"},\n        {\"line\": 8, \"referenceType\": \"DIRECT\"},\n        {\"line\": 11, \"referenceType\": \"INDIRECT\"}\n    ]\n}\n\nOutput should be a JSON array (and nothing else!), like:\n[\n    {\n        \"name\": \"...\",\n        \"type\": \"COMPONENT\",\n        \"alternativeNames\": [...],\n        \"occurrences\": [\n            {\"line\": ..., \"referenceType\": \"...\"},\n            ...\n        ]\n    },\n    ...\n]"
    }
  },
  {
    "modelProvider": "VDL",
    "modelTemperature": 1.0,
    "testProject": "ALL",
    "promptType": "JSON_OUTPUT_PROMPT",
    "prompt": {
      "first": "You are an experienced software engineer with expertise in software architecture analysis.\nGiven a text describing a software architecture (one sentence per line), identify all software architecture components mentioned in each sentence.\n\nFor each component, output a JSON object containing:\n- \"name\": the primary name of the component (use the most descriptive name).\n- \"type\": \"COMPONENT\"\n- \"alternativeNames\": a list of alternative or ambiguous names, if applicable.\n- \"occurrences\": a list of objects each with:\n    - \"line\": the line number of the occurrence (starting from 1),\n    - \"referenceType\": \"DIRECT\" or \"INDIRECT\".\n\nRules:\n- Use the exact casing of the component as it appears in the text.\n- Normalize similar component names if they clearly refer to the same concept (e.g., treat Database and User Database as the same component).\n- Only include components that are relevant architectural elements.\n- If a component appears in multiple lines, list all occurrences.\n- A reference where the name or one of the alternative names is in the sentence is called DIRECT. Otherwise it is called INDIRECT.\n- Only return a JSON array of component objects, nothing else.\n\nExample (for a single component):\n{\n    \"name\": \"Database\",\n    \"type\": \"COMPONENT\"\n    \"alternativeNames\": [\"UserDatabase\", \"DB\"],\n    \"occurrences\": [\n        {\"line\": 1, \"referenceType\": \"DIRECT\"},\n        {\"line\": 3, \"referenceType\": \"INDIRECT\"},\n        {\"line\": 8, \"referenceType\": \"DIRECT\"},\n        {\"line\": 11, \"referenceType\": \"INDIRECT\"}\n    ]\n}\n\nOutput should be a JSON array (and nothing else!), like:\n[\n    {\n        \"name\": \"...\",\n        \"type\": \"COMPONENT\",\n        \"alternativeNames\": [...],\n        \"occurrences\": [\n            {\"line\": ..., \"referenceType\": \"...\"},\n            ...\n        ]\n    },\n    ...\n]"
    }
  }
]